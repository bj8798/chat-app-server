{"version":3,"sources":["redux/reducers/loginReducer.js","redux/actionTypes.js","redux/reducers/chatReducer.js","redux/reducers/index.js","redux/store.js","redux/actions.js","LoginView.js","SignUpView.js","SigleMessage.js","TextSendBar.js","ChatView.js","serviceWorker.js","index.js"],"names":["initialState","username","undefined","signingIn","loginError","loginReducer","state","action","type","fullname","errorMessage","activeUsers","chatReducer","combineReducers","logger","createLogger","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","thunk","createStore","rootReducer","applyMiddleware","setUsername","setError","error","errorMesage","axios","defaults","baseURL","LoginView","props","goToSignIn","setState","redirect","email","password","this","to","className","Container","fluid","Form","Group","controlId","Label","Control","value","onChange","event","target","placeholder","Text","Check","label","Button","variant","onClick","doLogin","onTouchStart","count","React","Component","connect","dispatch","post","withCredentials","then","response","data","catch","console","log","message","SignUpView","doSignUp","SingleMessage","incoming","key","text","src","alt","time","TextSendBar","handleSend","messageText","sendHandler","aria-hidden","ChatView","process","PORT","setSocketAndListen","socket","io","query","on","addMessage","getCurrentTimeString","fromUser","toUser","currentMessage","messageList","sendMessage","activeChatUser","emit","Date","toLocaleString","hour","minute","hour12","handleUserActivate","currentUsers","getActiveUsers","getSessionInfo","Object","keys","map","user","get","setActiveUsers","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.014e06e6.chunk.js","sourcesContent":["import {\r\n  SET_USERNAME,\r\n  START_LOGIN,\r\n  END_LOGIN,\r\n  SET_LOGIN_ERROR,\r\n} from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  username: undefined,\r\n  signingIn: false,\r\n  loginError: undefined,\r\n};\r\n\r\nconst loginReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_USERNAME:\r\n      return {\r\n        ...state,\r\n        username: action.username,\r\n        signingIn: false,\r\n        fullname: action.fullname,\r\n      };\r\n    case START_LOGIN:\r\n      return { ...state, signingIn: true };\r\n    case END_LOGIN:\r\n      return { ...state, signingIn: false };\r\n    case SET_LOGIN_ERROR:\r\n      return { ...state, loginError: action.errorMessage, signingIn: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default loginReducer;\r\n","// Login and Signup actions\r\n\r\nexport const START_LOGIN = 'START_LOGIN';\r\n\r\nexport const END_LOGIN = 'END_LOGIN';\r\n\r\nexport const SET_USERNAME = 'SET_USERNAME';\r\n\r\nexport const SET_LOGIN_ERROR = 'SET_LOGIN_ERROR';\r\n\r\nexport const DO_LOGIN = 'DO_LOGIN';\r\n\r\n// Chat related actions\r\n\r\nexport const SET_ACTIVE_USERS = 'SET_ACTIVE_USERS';\r\n\r\nexport const SET_CHAT_USER = 'SET_CHAT_USER';\r\n","import { SET_ACTIVE_USERS, SET_CHAT_USER } from '../actionTypes';\r\n\r\nconst initialState = {\r\n  activeUsers: {},\r\n};\r\n\r\nconst chatReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_USERS:\r\n      return { ...state, activeUsers: action.activeUsers };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default chatReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport loginReducer from './loginReducer';\r\nimport chatReducer from './chatReducer'\r\n\r\nexport default combineReducers({ loginReducer, chatReducer });","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport rootReducer from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst middlewares = [thunk, logger];\r\n\r\nexport default createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(...middlewares))\r\n);\r\n","import {\r\n  START_LOGIN,\r\n  SET_USERNAME,\r\n  SET_LOGIN_ERROR,\r\n  SET_ACTIVE_USERS,\r\n} from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nexport const startLogin = () => {\r\n  return {\r\n    type: START_LOGIN,\r\n  };\r\n};\r\n\r\nexport const setUsername = (username, fullname) => {\r\n  return {\r\n    type: SET_USERNAME,\r\n    username,\r\n    fullname,\r\n  };\r\n};\r\n\r\nexport const setError = (error) => {\r\n  return {\r\n    type: SET_LOGIN_ERROR,\r\n    errorMesage: error,\r\n  };\r\n};\r\n\r\nexport const setActiveUsers = (activeUsers) => {\r\n  return {\r\n    type: SET_ACTIVE_USERS,\r\n    activeUsers,\r\n  };\r\n};\r\n\r\n// axios.defaults.baseURL = 'http://localhost:5000';\r\naxios.defaults.baseURL = 'https://cryptic-journey-31189.herokuapp.com/';\r\n\r\nexport const doLogin = (username, password) => {\r\n  return (dispatch) => {\r\n    dispatch(startLogin());\r\n    axios\r\n      .post(\r\n        '/login',\r\n        {\r\n          username,\r\n          password,\r\n        },\r\n        { withCredentials: true }\r\n      )\r\n      .then((response) => {\r\n        const fullname = response.data ? response.data.fullname : '';\r\n        dispatch(setUsername(username, fullname));\r\n      })\r\n      .catch((error) => {\r\n        console.log('error:', error.message);\r\n        dispatch(setError('Some issue occured'));\r\n      });\r\n  };\r\n};\r\n\r\nexport const doSignUp = (username, password, fullname) => {\r\n  return (dispatch) => {\r\n    dispatch(startLogin());\r\n    axios\r\n      .post(\r\n        '/signup',\r\n        {\r\n          username,\r\n          password,\r\n          fullname,\r\n        },\r\n        { withCredentials: true }\r\n      )\r\n      .then((response) => {\r\n        console.log('SignUp response:', response);\r\n        dispatch(setUsername(username, fullname));\r\n      })\r\n      .catch((error) => {\r\n        console.log('error:', error.message);\r\n        dispatch(setError('Some issue occured'));\r\n      });\r\n  };\r\n};\r\n\r\nexport const getSessionInfo = () => {\r\n  return (dispatch) => {\r\n    dispatch(startLogin());\r\n    axios\r\n      .get('/test_session', { withCredentials: true })\r\n      .then((response) => {\r\n        const username = response.data.username;\r\n        const fullname = response.data.fullname;\r\n        dispatch(setUsername(username, fullname));\r\n      })\r\n      .catch((error) => {\r\n        console.log('error:', error.message);\r\n        dispatch(setError('Some issue occured'));\r\n      });\r\n  };\r\n};\r\n\r\nexport const getActiveUsers = () => {\r\n  return (dispatch) => {\r\n    dispatch(startLogin());\r\n    axios\r\n      .get('/get_active_users', { withCredentials: true })\r\n      .then((response) => {\r\n        const activeUsers = response.data.activeUsers;\r\n        dispatch(setActiveUsers(activeUsers));\r\n      })\r\n      .catch((error) => {\r\n        console.log('error:', error.message);\r\n        dispatch(setError('Some issue occured'));\r\n      });\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nimport \"./index.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { doLogin } from \"./redux/actions\";\r\n\r\nclass LoginView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      redirect: null,\r\n    };\r\n  }\r\n\r\n  goToSignIn = () => {\r\n    this.setState({ redirect: \"/signup\" });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.redirect) {\r\n      return <Redirect to={this.state.redirect} />;\r\n    }\r\n\r\n    if (this.props.fullname) {\r\n      return <Redirect to=\"/chat\" />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"form-div\">\r\n        <Container fluid=\"md\">\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                value={this.state.email}\r\n                onChange={(event) => {\r\n                  this.setState({ email: event.target.value });\r\n                }}\r\n                placeholder=\"Enter email\"\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                We'll never share your email with anyone else.\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                value={this.state.password}\r\n                onChange={(event) => {\r\n                  this.setState({ password: event.target.value });\r\n                }}\r\n                placeholder=\"Password\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicCheckbox\">\r\n              <Form.Check type=\"checkbox\" label=\"Check me out\" />\r\n            </Form.Group>\r\n            <Button\r\n              variant=\"primary\"\r\n              onClick={() =>\r\n                this.props.doLogin(this.state.email, this.state.password)\r\n              }\r\n              onTouchStart={() =>\r\n                this.props.doLogin(this.state.email, this.state.password)\r\n              }\r\n            >\r\n              Let me in :)\r\n            </Button>{\" \"}\r\n            <Button\r\n              variant=\"outline-info\"\r\n              onClick={this.goToSignIn}\r\n              onTouchStart={() => this.setState({ count: \"Its clicked\" })}\r\n            >\r\n              I am New Here !\r\n            </Button>\r\n          </Form>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  fullname: state.loginReducer.fullname,\r\n});\r\n\r\nexport const mapDispatchToProps = (dispatch) => ({\r\n  doLogin: (username, password) => dispatch(doLogin(username, password)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginView);\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nimport \"./LoginView.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { doSignUp } from \"./redux/actions\";\r\n\r\nclass SignUpView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      fullname: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    if (this.props.fullname) {\r\n      console.log(\"full name setted:\", this.props.fullname);\r\n      return <Redirect to=\"/chat\" />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"form-div\">\r\n        <Container fluid=\"md\">\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                value={this.state.email}\r\n                onChange={(event) => {\r\n                  this.setState({ email: event.target.value });\r\n                }}\r\n                placeholder=\"Enter email\"\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                We'll never share your email with anyone else.\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                value={this.state.password}\r\n                onChange={(event) => {\r\n                  this.setState({ password: event.target.value });\r\n                }}\r\n                placeholder=\"Password\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicName\">\r\n              <Form.Label>Full Name</Form.Label>\r\n              <Form.Control\r\n                value={this.state.fullname}\r\n                onChange={(event) => {\r\n                  this.setState({ fullname: event.target.value });\r\n                }}\r\n                placeholder=\"Enter Full Name\"\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              variant=\"primary\"\r\n              onClick={() =>\r\n                this.props.doSignUp(\r\n                  this.state.email,\r\n                  this.state.password,\r\n                  this.state.fullname\r\n                )\r\n              }\r\n              onTouchStart={() =>\r\n                this.props.doSignUp(\r\n                  this.state.email,\r\n                  this.state.password,\r\n                  this.state.fullname\r\n                )\r\n              }\r\n            >\r\n              Sign Me Up !!\r\n            </Button>{\" \"}\r\n          </Form>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  fullname: state.loginReducer.fullname,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  doSignUp: (username, password, fullname) =>\r\n    dispatch(doSignUp(username, password, fullname)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUpView);\r\n","import React from 'react';\r\nimport './chatView.css';\r\n\r\nconst SingleMessage = (props) => {\r\n  console.log('props.incoming:', props.incoming);\r\n  if (props.incoming) {\r\n    return (\r\n      <div className=\"incoming_msg\" key={props.text}>\r\n        <div className=\"incoming_msg_img\">\r\n          {' '}\r\n          <img\r\n            src=\"https://ptetutorials.com/images/user-profile.png\"\r\n            alt=\"sunil\"\r\n          />{' '}\r\n        </div>\r\n        <div className=\"received_msg\">\r\n          <div className=\"received_withd_msg\">\r\n            <p>{props.text}</p>\r\n            <span className=\"time_date\">{props.time}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"outgoing_msg\">\r\n        <div className=\"sent_msg\">\r\n          <p>{props.text}</p>\r\n          <span className=\"time_date\">{props.time}</span>{' '}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default SingleMessage;\r\n","import React from 'react';\r\n\r\nimport './chatView.css';\r\n\r\nclass TextSendBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      messageText: '',\r\n    };\r\n  }\r\n\r\n  handleSend = () => {\r\n    console.log('at handle send:', this.state.messageText);\r\n    this.props.sendHandler(this.state.messageText);\r\n    this.setState({ messageText: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"type_msg\">\r\n        <div className=\"input_msg_write\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"write_msg\"\r\n            placeholder=\"Type a message\"\r\n            onChange={(event) => {\r\n              this.setState({ messageText: event.target.value });\r\n            }}\r\n            value={this.state.messageText}\r\n          />\r\n          <button\r\n            className=\"msg_send_btn\"\r\n            type=\"button\"\r\n            onClick={this.handleSend}\r\n          >\r\n            <i className=\"fa fa-paper-plane-o\" aria-hidden=\"true\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextSendBar;\r\n","import React from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nimport './chatView.css';\r\nimport { connect } from 'react-redux';\r\nimport { getSessionInfo, getActiveUsers } from './redux/actions';\r\nimport SingleMessage from './SigleMessage';\r\nimport TextSendBar from './TextSendBar';\r\n\r\nconst PORT = process.env.PORT || 4000;\r\n// const ENDPOINT = 'http://localhost:4000/';\r\nconst ENDPOINT = 'https://cryptic-journey-31189.herokuapp.com/';\r\nclass ChatView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      messageText: '',\r\n      messageList: [],\r\n      currentUsers: [],\r\n      activeChatUser: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.username) {\r\n      this.setSocketAndListen();\r\n      this.props.getActiveUsers();\r\n    } else {\r\n      this.props.getSessionInfo();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (!this.socket && this.props.username) {\r\n      this.setSocketAndListen();\r\n      this.props.getActiveUsers();\r\n    }\r\n  }\r\n\r\n  setSocketAndListen = () => {\r\n    this.socket = io.connect(ENDPOINT, {\r\n      query: `username=${this.props.username}&fullname=${this.props.fullname}`,\r\n    });\r\n\r\n    this.socket.on('message_received', (message) => {\r\n      this.addMessage(\r\n        message.text,\r\n        true,\r\n        this.getCurrentTimeString(),\r\n        message.fromUser,\r\n        this.props.username\r\n      );\r\n    });\r\n  };\r\n\r\n  addMessage = (text, incoming, time, fromUser, toUser) => {\r\n    const currentMessage = {\r\n      text,\r\n      incoming,\r\n      time,\r\n      fromUser,\r\n      toUser,\r\n    };\r\n\r\n    const messageList = [...this.state.messageList, currentMessage];\r\n    this.setState({ messageList });\r\n  };\r\n\r\n  sendMessage = (text, toUser) => {\r\n    console.log(\r\n      'send Message from:',\r\n      this.props.username,\r\n      ' to:',\r\n      this.state.activeChatUser\r\n    );\r\n    this.socket.emit('message_sent', {\r\n      text,\r\n      toUser,\r\n      fromUser: this.props.username,\r\n    });\r\n  };\r\n\r\n  getCurrentTimeString = () => {\r\n    var time = new Date();\r\n    return time.toLocaleString('en-US', {\r\n      hour: 'numeric',\r\n      minute: 'numeric',\r\n      hour12: true,\r\n    });\r\n  };\r\n\r\n  handleUserActivate = (activeChatUser) => {\r\n    this.setState({ activeChatUser });\r\n  };\r\n\r\n  handleSend = (messageText) => {\r\n    this.addMessage(\r\n      messageText,\r\n      false,\r\n      this.getCurrentTimeString(),\r\n      this.props.username,\r\n      this.state.activeChatUser\r\n    );\r\n    this.sendMessage(messageText, this.state.activeChatUser);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h3 className=\"text-center\">Quick Chat</h3>\r\n        <div className=\"messaging\">\r\n          <div className=\"inbox_msg\">\r\n            <div className=\"inbox_people\">\r\n              <div className=\"headind_srch\">\r\n                <div className=\"recent_heading\">\r\n                  <h4>Recent</h4>\r\n                </div>\r\n                <div className=\"srch_bar\">\r\n                  <div className=\"stylish-input-group\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"search-bar\"\r\n                      placeholder=\"Search\"\r\n                    />\r\n                    <span className=\"input-group-addon\">\r\n                      <button type=\"button\">\r\n                        {' '}\r\n                        <i className=\"fa fa-search\" aria-hidden=\"true\"></i>{' '}\r\n                      </button>\r\n                    </span>{' '}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"inbox_chat\">\r\n                {Object.keys(this.props.activeUsers).map((user) =>\r\n                  this.props.username !== user ? (\r\n                    <div\r\n                      className={\r\n                        user === this.state.activeChatUser\r\n                          ? 'chat_list active_chat'\r\n                          : 'chat_list'\r\n                      }\r\n                      onClick={() => this.handleUserActivate(user)}\r\n                    >\r\n                      <div className=\"chat_people\">\r\n                        <div className=\"chat_img\">\r\n                          {' '}\r\n                          <img\r\n                            src=\"https://ptetutorials.com/images/user-profile.png\"\r\n                            alt=\"profile image\"\r\n                          />{' '}\r\n                        </div>\r\n                        <div className=\"chat_ib\">\r\n                          <h5>\r\n                            {this.props.activeUsers[user]}{' '}\r\n                            <span className=\"chat_date\">Dec 25</span>\r\n                          </h5>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ) : null\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className=\"mesgs\">\r\n              <div className=\"msg_history\">\r\n                {this.state.messageList.map((message) =>\r\n                  message.fromUser === this.state.activeChatUser ||\r\n                  message.toUser === this.state.activeChatUser ? (\r\n                    <SingleMessage\r\n                      text={message.text}\r\n                      incoming={message.incoming}\r\n                      time={message.time}\r\n                    />\r\n                  ) : null\r\n                )}\r\n              </div>\r\n              {this.state.activeChatUser ? (\r\n                <TextSendBar\r\n                  sendHandler={(messageText) => this.handleSend(messageText)}\r\n                />\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    fullname: state.loginReducer.fullname,\r\n    username: state.loginReducer.username,\r\n    activeUsers: state.chatReducer.activeUsers,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getSessionInfo: () => dispatch(getSessionInfo()),\r\n  getActiveUsers: () => dispatch(getActiveUsers()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatView);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\nimport LoginView from \"./LoginView\";\nimport SignUpView from \"./SignUpView\";\nimport ChatView from \"./ChatView\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Importing the Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Provider store={store}>\n        <Switch>\n          <Route path=\"/login\" component={LoginView} />\n          <Route path=\"/signup\" component={SignUpView} />\n          <Route path=\"/chat\" component={ChatView} />\n          <Route path=\"/\" component={LoginView} />\n        </Switch>\n      </Provider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}